# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jxfb4lRdxq6tmZhXKzNPpkbF0MQGj6XD
"""

# Step 1: Import libraries
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 2: Load MNIST CSV files
train_data = pd.read_csv('mnist_train.csv')  # Replace with your path
test_data = pd.read_csv('mnist_test.csv')    # Replace with your path

# Step 3: Handle missing values
train_data.fillna(0, inplace=True)
test_data.fillna(0, inplace=True)

# Step 4: Convert to binary classification (0 vs not 0)
train_data['label'] = train_data['label'].apply(lambda x: 1 if x == 0 else 0)
test_data['label'] = test_data['label'].apply(lambda x: 1 if x == 0 else 0)

# Step 5: Split features and labels
X_train = train_data.drop('label', axis=1)
y_train = train_data['label']

X_test = test_data.drop('label', axis=1)
y_test = test_data['label']

# Step 6: Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 7: Train binary Logistic Regression
log_reg = LogisticRegression(solver='saga', max_iter=200, n_jobs=-1)  # increased max_iter
log_reg.fit(X_train_scaled, y_train)

# Step 8: Make predictions
y_pred = log_reg.predict(X_test_scaled)

# Step 9: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy*100:.2f}%")
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(report)

