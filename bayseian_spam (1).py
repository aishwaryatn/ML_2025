# -*- coding: utf-8 -*-
"""bayseian_spam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vovEQiipq-SAqtlKHg-GOCjadhwu4Z9Y
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('spam.csv', encoding='latin-1')
df = df[['v1', 'v2']]  # Keep only relevant columns
df.columns = ['label', 'message']  # Rename columns for clarity

# Convert labels to binary values: 'ham' -> 0, 'spam' -> 1
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Split the dataset into features and labels
X = df['message']
y = df['label']

from sklearn.feature_extraction.text import CountVectorizer

# Convert text data into numerical vectors
vectorizer = CountVectorizer(stop_words='english')
X_vectorized = vectorizer.fit_transform(X)

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB

# Initialize and train the Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(f'Accuracy: {accuracy_score(y_test, y_pred):.2f}')
print(classification_report(y_test, y_pred))

# Create a DataFrame with actual and predicted labels
results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

# Save to CSV
results.to_csv('spam_predictions.csv', index=False)
print("Predictions saved to 'spam_predictions.csv'")

